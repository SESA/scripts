#!/bin/bash
# just a kludge needs to be re-written
# added support to multi disk requests
set -x

# FIXME:
# there is big sequential loops here probably
# does not matter right now as aoe id's
# only range from {0..9} * {0..15}  

export PATH=$PATH:/root/scripts
export BIGPHYS=32
declare -r DISKINFODIR=${KHDISK_INFODIR:-/root/disks}
declare -r MEMCINFODIR=${KHMEMC_INFODIR:-/root/memc}
declare -r AOEIDFILE=$DISKINFODIR/aoenextid
declare -i BUFFERCONFIG=1

if [[ ! -d $DISKINFODIR ]]
then
  if [[ -a $DISKINFODIR ]]
  then
     if ! rm -rf $DISKINFODIR
     then
       echo "ERROR: $DISKINFODIR exists and is not a directory and cannot be removed" >&2
       exit -1
     fi
  fi
  mkdir -p $DISKINFODIR
fi

function resetAOEID {
   local id="$1"

   if [[ -z "$id" ]]
   then
      id="0 0"
   fi
   echo "$id" > $AOEIDFILE
   return 0      
}

function getAOEID
{
  #add locking to this
  local shelf
  local slot
  local nextshelf
  local nextslot
  local aoeid

  if [[ ! -a $AOEIDFILE  ]]
  then
      resetAOEID
  fi
  aoeid=$(cat $AOEIDFILE)
  shelf=${aoeid%% *}
  slot=${aoeid##* }

  if (( $slot > 15 ))
  then
    echo "ERROR: exceed max aoe slots $slot" >&2
    exit -1
  fi
  if (( $shelf > 9 ))
  then
    echo "ERROR: exceed max aoe shelves $shelf" >&2
    exit -1
  fi
  nextslot=$(( $slot + 1 ))
  if (( $nextslot > 15 ))
  then
    nextshelf=$(( $shelf + 1 ))
    nextslot=0
  else
    nextshelf=$shelf
  fi
  echo "$nextshelf $nextslot" > $AOEIDFILE
  echo "$shelf $slot"
  return 0
}

function usage
{
   echo "$0 [-C] [-c <comma seperated list of IPs>] [-a <comma seperated list of macs>] [-n number]"
   echo "   -C don't fetch memcached servers from info dir"
   echo "   -c memcached servers"
   echo "   -a AOE mac ACL"
   echo "   -n numer of instances"
   echo "   -v verbose"
}

origargs="$@"
optcount=0
export FETCHMEMCINFO=1  
export VERBOSE=0

while getopts "Cc:a:n:vh" OPT
do 
  case $OPT in
    ("C") export FETCHMEMCINFO=0; (( optcount=optcount + 1));;
    ("c") export memcipaddr="$OPTARG"; (( optcount=optcount + 2));;
    ("a") export aoeethaddr="$OPTARG"; (( optcount=optcount + 2));;
    ("n") export num="$OPTARG"; (( optcount=optcount + 2));;
    ("v") export VERBOSE=1; (( optcount=optcount + 1));;
    ("h") usage; exit -1;;
  esac
done
 
if [[ -z $num ]]
then
   num=1
fi

if [[ $FETCHMEMCINFO = 1 ]]
then
    infofiles=$(find $MEMCINFODIR -type f)
    for f in $infofiles
      do
      memcip=$(cat $f | grep nodeinfo)
      memcip=${memcip##* }
      export memcipaddr=${memcipaddr},$memcip
      done
fi

export memcipaddr=${memcipaddr#,}

if [[ -z $aoeeth && -a /proc/device-tree/u-boot-env/aoe_iface ]]
then
   aoeeth=$(cat /proc/device-tree/u-boot-env/aoe_iface)
fi

if [[ -z $aoenetid && -a /proc/device-tree/u-boot-env/bg_${aoeeth}_netid ]]
then
  aoenetid=$(cat /proc/device-tree/u-boot-env/bg_${aoeeth}_netid)
fi

if [[ -z $ramdisk && -a /root/vblade.cpio.gz.uimg ]]
then
   ramdisk=/root/vblade.cpio.gz.uimg
fi

if [[ -z $kernel && -a /root/vblade-uImage ]]
then
   kernel=/root/vblade-uImage
fi

if [[ -z $khuser && -a /proc/device-tree/u-boot-env/khctluser ]]
then
   khuser=$(cat /proc/device-tree/u-boot-env/khctluser)
fi

if [[ -z $ramdisk || -z $khuser || -z $aoenetid || -z $aoeeth ]]
then
  echo "ERROR: Could not determine values" >&2
  exit -1
fi

if ! ifconfig $aoeeth up
then
  echo "ERROR: failed to config ethernet inteface $aoeeth" >&2
  exit -1 
else
  myethaddr=$(ifconfig $aoeeth | grep HWaddr)
  myethaddr=${myethaddr##*HWaddr }
fi

if [[ -z $aoeethaddr ]]
then
  aoeethaddr=$myethaddr
fi

# FIXME: HERE IS THE LOOP SEE TOP COMMENT
# all the ids first to ensure that 
# we have enough ids
declare -i i=0
declare -a aoeids
while (( $i < $num ))
do
  aoeids[$i]=$(getAOEID)
  if (( $? != 0 ))
  then
     if (( $i > 0 ))
     then
        resetNextAOEid "${aoeids[0]}"
     fi
     echo "ERROR: need $num aoe disk ids but only got $(( $i + 1 ))" >&2
     exit -1
  fi
  (( i++ ))
done

disks=$(khget -i -n $aoenetid $khuser $num)

echo $disks
if (( $? != 0 ))
then
  echo "ERROR: failed to acquire $num nodes for disk" >&2
  exit -1
fi

if [[ -n $kernel ]]
then
  echo "$disks" | khdo loadkernel $kernel
fi
echo "$disks" | khdo loadramdisk $ramdisk

nodes=$(echo "$disks" | khdo pernodecmd "echo %node%")
i=0
for n in $nodes
do
  aoeid="${aoeids[$i]}"
  shelf=${aoeid%% *}
  slot=${aoeid##* }
  configline="itest \$bgp_rank == $n && setenv app_aoe_shelf $shelf && setenv app_aoe_slot $slot && setenv app_aoe_eth eth1"
  if (( $BUFFERCONFIG == 1 ))
  then
    if [[ -z $config ]]
    then
      config="$configline"
    else
      config="$config
$configline"
    fi
  else 
    echo "$disks" | khdo write "$configline"
  fi
  echo "$disks" > $DISKINFODIR/e${shelf}.${slot}.info
  (( i++ ))
done

if (( $BUFFERCONFIG == 1 ))
then
   echo "$disks" | khdo write "$config"
fi

if [[ -n $aoeethaddr ]]
then
  echo "$disks" | khdo write "setenv app_aoe_macs $aoeethaddr"
fi


if [[ -n $memcipaddr ]]
then
  echo "$disks" | khdo write "setenv app_aoe_memcips $memcipaddr"
fi

if [[ $VERBOSE = 1 ]]
then
  echo "$disks" | khdo write "setenv app_aoe_verbose 1"
fi


let BIGPHYS*=256 
echo "$disks" | khdo write "setenv bootargs bigphysarea=$BIGPHYS console=bgtty0,\$bgtty_sendid,\$bgtty_rcvid,\$bgtty_dest init=/init ip=\$eth0ip:\$serverip:\$sitegate:\$sitemask::eth0:off"
echo "$disks" | khdo write 'setenv ramfsarg $ramfsaddr'
echo "$disks" | khdo write "run boot"



